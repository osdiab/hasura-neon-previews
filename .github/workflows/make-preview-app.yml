name: Make Preview App
on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main

jobs:
  preview-neon:
    name: "Make Neon Preview Postgres Branch"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: List Neon branches
        id: list-branches
        env:
          NEON_PROJECT_ID: ${{secrets.NEON_PROJECT_ID}}
          NEON_API_KEY: ${{secrets.NEON_API_KEY}}
        run: |
          curl "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches" \
            --header 'accept: application/json' \
            --header "Authorization: Bearer $NEON_API_KEY" \
            --fail-with-body \
            --output list-neon-branches-response.json
      - name: Upload List Branches Failure
        if: failure() && steps.list-branches.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: list-neon-branches-failure.json
          path: list-neon-branches-response.json
      - name: Get main Neon branch
        id: get-main-branch
        run: |
          echo "branch_id=$(
            jq --raw-output '.branches[] | select(.name=="main").id' list-neon-branches-response.json
          )" >> $GITHUB_OUTPUT
      - name: Get existing Neon branch for this PR
        id: get-existing-branch
        run: |
          echo "branch_id=$(
            jq --raw-output '.branches[] | select(.name | startswith("${{ github.head_ref }}")).id' list-neon-branches-response.json
          )" >> $GITHUB_OUTPUT
      - name: Delete existing branch for this PR
        id: delete-existing-branch
        if: ${{ steps.get-existing-branch.outputs.branch_id != '' }}
        env:
          NEON_PROJECT_ID: ${{secrets.NEON_PROJECT_ID}}
          NEON_API_KEY: ${{secrets.NEON_API_KEY}}
        # due to Neon operations concurrency limit, need to retry for now
        # https://community.neon.tech/t/project-already-has-running-operations-scheduling-of-new-ones-is-prohibited/242
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 1
          max_attempts: 3
          retry_on: error
          command: |
            curl "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches/${{ steps.get-existing-branch.outputs.branch_id }}" \
              --request DELETE \
              --header 'Accept: application/json' \
              --header "Authorization: Bearer $NEON_API_KEY" \
              --header 'Content-Type: application/json' \
              --fail-with-body \
              --output delete-neon-branch-response.json
      - name: Upload Delete Existing Branch Failure
        if: failure() && steps.delete-existing-branch.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: delete-neon-branch-failure.json
          path: delete-neon-branch-response.json
      - name: Create Neon Branch
        id: create-branch
        env:
          NEON_PROJECT_ID: ${{secrets.NEON_PROJECT_ID}}
          NEON_API_KEY: ${{secrets.NEON_API_KEY}}
        run: |
          curl "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches" \
            --header 'Accept: application/json' \
            --header "Authorization: Bearer $NEON_API_KEY" \
            --header 'Content-Type: application/json' \
            --fail-with-body \
            --output create-neon-branch-response.json \
            --data "{
              \"endpoints\": [{ \"type\": \"read_write\" }],
              \"branch\": {
                \"parent_id\": \"${{steps.get-main-branch.outputs.branch_id}}\",
                \"name\": \"${{ github.head_ref }} (SHA: ${{ github.sha }})\"
              }
            }"
      - name: Upload Create Branch Failure
        if: failure() && steps.create-branch.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: create-neon-branch-failure.json
          path: create-neon-branch-response.json
  # preview-hasura:
  #   name: "Make Hasura Preview"
  #   runs-on: ubuntu-latest
  #   needs: [preview-neon]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: hasura/hasura-cloud-preview-apps@v0.1.7
  #       with:
  #         name: "hasura-neon-previews-pr-${{github.event.number}}" # name of the preview app to created
  #         hasuraProjectDirectoryPath: apps/hasura # path to the Hasura project directory in the repo
  #         hasuraEnv: | # env vars exposed to the Hasura instance
  #          	HASURA_GRAPHQL_CORS_DOMAINS=http://my-site.com
  #          	PG_DATABASE_URL=${{secrets.PG_STRING}}
  #         postgresDBConfig: |
  #           POSTGRES_SERVER_CONNECTION_URI=${{secrets.PG_STRING}}
  #           PG_ENV_VARS_FOR_HASURA=PG_DB_URL_1,PG_DB_URL_2
  #       env:
  #         GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}} # ${{ secrets.GITHUB_TOKEN }} is provided by default by GitHub actions
  #         HASURA_CLOUD_ACCESS_TOKEN: ${{secrets.HASURA_CLOUD_ACCESS_TOKEN}} # Hasura Cloud access token to contact Hasura Cloud APIs